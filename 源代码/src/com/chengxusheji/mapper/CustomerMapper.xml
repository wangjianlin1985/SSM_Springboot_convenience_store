<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.CustomerMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加客户记录 -->
	<insert id="addCustomer" parameterType="customer">
		insert into t_customer(name,gender,birthDate,telephone,address,regTime) values 
		(#{name},#{gender},#{birthDate},#{telephone},#{address},#{regTime})
	</insert>

	<!-- 按照查询条件分页查询客户记录 -->
	<select id="queryCustomer" resultMap="customerMap" >
		select t_customer.* from t_customer ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="customerMap" type="customer">
        <id property="customerId" column="customerId" />
    </resultMap>

    <!-- 按照查询条件查询所有客户记录 -->
	<select id="queryCustomerList" resultMap="customerMap" >
		select t_customer.* from t_customer ${where}
	</select>

    <!-- 按照查询条件的客户记录数 -->
	<select id="queryCustomerCount" resultType="int">
		select count(*) from t_customer ${where}
	</select>

	<!-- 根据主键查询某个客户记录 -->
	<select id="getCustomer" parameterType="int" resultMap="customerMap">
		select * from t_customer where t_customer.customerId = #{customerId}
	</select>

	<!-- 更新客户记录 -->
	<update id="updateCustomer" parameterType="customer">
		update t_customer set name=#{name},gender=#{gender},birthDate=#{birthDate},telephone=#{telephone},address=#{address},regTime=#{regTime} where customerId = #{customerId}
	</update>

	<!-- 删除客户记录 -->
	<delete id="deleteCustomer" parameterType="int">
		delete from t_customer where customerId=#{customerId}
	</delete>

</mapper>
